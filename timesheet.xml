<?xml version="1.0" encoding="UTF-8" ?>
<Module>
    <ModulePrefs title="Timesheet" height="250">
        <Require feature="setprefs"/>
        <Require feature="tabs"/>
        <Require feature="analytics"/>
        <Require feature="minimessage"/>
    </ModulePrefs>
    <UserPref name="selectedTab" datatype="hidden"/>
    <UserPref name="calauth" display_name="Cal Auth" required="false" datatype="hidden"/>
    <UserPref name="event_data_1" display_name="Event Data 1" required="false" datatype="hidden"/>
    <UserPref name="event_data_2" display_name="Event Data 2" required="false" datatype="hidden"/>
    <UserPref name="event_data_3" display_name="Event Data 3" required="false" datatype="hidden"/>
    <UserPref name="event_data_4" display_name="Event Data 4" required="false" datatype="hidden"/>
    <UserPref name="event_data_5" display_name="Event Data 5" required="false" datatype="hidden"/>
    <UserPref name="event_data_6" display_name="Event Data 6" required="false" datatype="hidden"/>
    <UserPref name="event_data_7" display_name="Event Data 7" required="false" datatype="hidden"/>
    <UserPref name="event_data_8" display_name="Event Data 8" required="false" datatype="hidden"/>
    <UserPref name="event_data_9" display_name="Event Data 9" required="false" datatype="hidden"/>
    <UserPref name="event_data_10" display_name="Event Data 10" required="false" datatype="hidden"/>
    <UserPref name="event_data_11" display_name="Event Data 11" required="false" datatype="hidden"/>
    <UserPref name="event_data_12" display_name="Event Data 12" required="false" datatype="hidden"/>
    <UserPref name="event_data_13" display_name="Event Data 13" required="false" datatype="hidden"/>
    <UserPref name="event_data_14" display_name="Event Data 14" required="false" datatype="hidden"/>
    <UserPref name="event_data_15" display_name="Event Data 15" required="false" datatype="hidden"/>
    <UserPref name="event_data_16" display_name="Event Data 16" required="false" datatype="hidden"/>
    <UserPref name="event_data_17" display_name="Event Data 17" required="false" datatype="hidden"/>
    <UserPref name="event_data_18" display_name="Event Data 18" required="false" datatype="hidden"/>
    <UserPref name="event_data_19" display_name="Event Data 19" required="false" datatype="hidden"/>
    <UserPref name="event_data_20" display_name="Event Data 20" required="false" datatype="hidden"/>
    <UserPref name="event_data_21" display_name="Event Data 21" required="false" datatype="hidden"/>
    <UserPref name="event_data_22" display_name="Event Data 22" required="false" datatype="hidden"/>
    <UserPref name="event_data_23" display_name="Event Data 23" required="false" datatype="hidden"/>
    <UserPref name="event_data_24" display_name="Event Data 24" required="false" datatype="hidden"/>
    <UserPref name="event_data_25" display_name="Event Data 25" required="false" datatype="hidden"/>
    <UserPref name="event_data_26" display_name="Event Data 26" required="false" datatype="hidden"/>
    <UserPref name="event_data_27" display_name="Event Data 27" required="false" datatype="hidden"/>
    <UserPref name="event_data_28" display_name="Event Data 28" required="false" datatype="hidden"/>
    <UserPref name="event_data_29" display_name="Event Data 29" required="false" datatype="hidden"/>
    <UserPref name="event_data_30" display_name="Event Data 30" required="false" datatype="hidden"/>
    <UserPref name="event_data_31" display_name="Event Data 31" required="false" datatype="hidden"/>
    <UserPref name="current_event" display_name="Current Event" required="false" datatype="hidden"/>
    <UserPref name="active_task_ids" display_name="Active Task Ids" required="false" datatype="hidden"/>
    <UserPref name="task_names" display_name="Task Names" required="false" datatype="hidden"/>
    <UserPref name="current_version" display_name="Current Version" required="false" datatype="hidden"/>
    <UserPref name="next_event_id" display_name="Next Event Id" required="false" datatype="hidden"/>
    <UserPref name="cssGadgetContentFile" datatype="hidden" default_value="timesheet.css"/>
    <UserPref name="jsGadgetContentFile" datatype="hidden" default_value="timesheet.js"/>
    <UserPref name="htmlGadgetContentFile" datatype="hidden" default_value="timesheet.html"/>
    <UserPref name="session_id" datatype="hidden"/>
    <UserPref name="last_calendar" display_name="Last Calendar Selected" datatype="hidden"/>
    <UserPref name="start_day_of_week"
              display_name="Summary Week Start Day"
              datatype="enum"
              default_value="M">
        <EnumValue value="M" display_value="Monday"/>
        <EnumValue value="S" display_value="Sunday"/>
    </UserPref>
    <UserPref name="hide_weekend"
              display_name="Summary Weekend"
              datatype="enum"
              default_value="0">
        <EnumValue value="0" display_value="Show"/>
        <EnumValue value="1" display_value="Hide"/>
    </UserPref>
    <UserPref name="summary_date_format"
              display_name="Summary Date Format"
              datatype="enum"
              default_value="1">
        <EnumValue value="1" display_value="DD/MM/YY"/>
        <EnumValue value="2" display_value="MM/DD/YY"/>
    </UserPref>
    <UserPref name="summary_format"
              display_name="Summary Total Format"
              datatype="enum"
              default_value="0">
        <EnumValue value="0" display_value="Decimal (e.g. 1.50)"/>
        <EnumValue value="1" display_value="Descriptive (e.g. 1h 30m)"/>
    </UserPref>
    <UserPref name="summary_zero_duration_format"
              display_name="Summary Zero Duration Format"
              datatype="enum"
              default_value="0">
        <EnumValue value="0" display_value="Display Duration"/>
        <EnumValue value="1" display_value="Display Hyphen"/>
        <EnumValue value="2" display_value="Empty"/>
    </UserPref>
    <UserPref name="summary_round"
              display_name="Round Summary Total"
              datatype="enum"
              default_value="1">
        <EnumValue value="1" display_value="to nearest minute"/>
        <EnumValue value="5" display_value="to nearest 5 minutes"/>
        <EnumValue value="10" display_value="to nearest 10 minutes"/>
        <EnumValue value="15" display_value="to nearest 15 minutes"/>
        <EnumValue value="30" display_value="to nearest 30 minutes"/>
        <EnumValue value="45" display_value="to nearest 45 minutes"/>
        <EnumValue value="60" display_value="to nearest 60 minutes"/>
    </UserPref>

    <Content type="html-inline">
        <![CDATA[

<style type="text/css">
<!--

#taskContent {
}

#taskContent #task_list {
    width: 99%;
    overflow: visible;
    clear: both;
    margin-left: 2px;
    margin-right: 1px;
}

#taskContent #tasks {
    width: 100%;
    overflow: visible;
    list-style-type: none;
    margin: 0;
    padding: 0;
}

#taskContent #tasks li {
    width: 100%;
    margin: 0;
    float: left;
    clear: both;
}

#taskContent #tasks table {
    width: 100%;
    margin: 0;
    float: left;
    clear: both;
    border-collapse: collapse;
}

#taskContent #tasks table tr {
}

#taskContent #tasks table td {
    border-width: 0 1px 1px 1px;
    border-style: solid;
}

#taskContent #title table {
    width: 100%;
    margin: 0;
    float: left;
    clear: both;
    border-collapse: collapse;
}

#taskContent #current_task table {
    width: 100%;
    margin: 0;
    float: left;
    clear: both;
    border-collapse: collapse;
}

#taskContent #title table tr {
}

#taskContent #title table td {
    border-width: 1px;
    border-style: solid;
}

.title {
    width: 100%;
}

.title_heading {
    font-weight: bold;
    font-size: smaller;
    border: solid;
    border-width: 1px;
    text-align: center;
    float: none;
    line-height: 21px;
    vertical-align: middle;
    cursor: default;
    padding: 2px;
    background-repeat: repeat;
}

.no_left_border {
    border-left: none;
}

.task_data {
    font-weight: normal;
    border: solid;
    border-top: none;
    text-align: left;
    float: none;
    vertical-align: middle;
    cursor: default;
    padding: 2px;
    height: auto;
    font-size: smaller;
    background-image: none;
}

.invisihandle {
    border: thin hidden;
    width: 10px;
    cursor: auto;
    padding: 0px;
    background-repeat: repeat-y;
}

.handle {
    border: thin hidden;
    width: 10px;
    cursor: move;
    padding: 0px;
    text-align: center;
}

.handle_image {
    background-image: url( "http://timesheetmod.googlecode.com/svn/trunk/images/move.png" );
    background-position: 0px;
    background-repeat: repeat-y;
}

.task_name {
    width: auto;
}

.total_time {
    border-left: none;
    text-align: center;
    width: 25%;
}

.status {
    border-left: none;
    width: 20%;
}

.change {
    text-align: center;
    border-left: none;
    width: 6%;
}

.change a {
    float: left;
    font-size: smaller;
}

.control {
    text-align: center;
    font-size: smaller;
    font-weight: bold;
    text-decoration: none;
}

.control:hover {
    cursor: pointer;
    text-decoration: underline overline;
}

.control a {
    text-decoration: none;
}

.control a:hover {
    cursor: pointer;
    text-decoration: underline overline;
}

.controlNoHover:hover {
    cursor: auto;
    text-decoration: none;
}

.name_data {
    float: left;
}

#buttons {
    clear: both;
}

.stealImage {
    margin: 0px;
    padding-bottom: 0px;
    float: left;
}

.addTaskControl {
    float: right;
    padding: 5px;
    height: 23px;
    margin: 5px;
}

.addTaskEntry {
    border: solid 1px;
    height: 21px;
    clear: right;
    float: right;
    visibility: hidden;
    display: none;
    width: 200px;
    padding: 5px;
    margin: 5px;
    background-repeat: repeat;
}

.addTaskEntryTextbox {
    height: 18px;
    float: left;
    width: 150px;
    border: solid 1px;
    font-weight: normal;
    cursor: text;
}

.editTaskName {
    height: 12px;
    float: left;
    border: solid 1px;
    font-size: 100%;
    font-weight: normal;
    cursor: text;
    width: 99%; /*padding: 5px;*/
}

.editTaskNameSmaller {
    height: 12px;
    float: left;
    border: solid 1px;
    font-size: smaller;
    font-weight: normal;
    cursor: text;
    width: 99%; /*padding: 5px;*/
}

#errorMessages {
    clear: both;
    float: left;
    margin-top: 20px;
    margin-left: 5px;
    color: #ff3300;
}

.currentTimer {
    font-style: oblique;
}

.empty {
    border: none;
    background-color: transparent;
    background-image: none;
    padding-right: 3px;
}

.current_total_time {
    border: solid 1px;
    border-left: none;
    text-align: center;
    width: 25%;
}

/*  To Be Removed */

#dataDiv {
    clear: both;
    float: left;
    margin-top: 20px;
}

#summaryContent #summary {
    overflow-x: auto;
}

#summaryContent #summary table {
    width: 99%;
    margin: 1px;
    float: left;
    clear: both;
    border-collapse: collapse;
    margin-top: 1px;
}

#summaryContent #summary table tr {
}

#summaryContent #summary table td {
    border: solid 1px;
}

.day_title {
    border: solid 1px;
}

.task_title {
    width: 23%;
    border: solid 1px;
}

.task_title_data {
    white-space: normal;
    font-size: 75%;
}

.summary_task_data {
    font-weight: bold;
    border: solid 1px;
    text-align: center;
    float: none;
    vertical-align: middle;
    cursor: default;
    padding: 1px;
    height: auto;
    background-image: none;
}

.summary_total {
    white-space: nowrap;
    font-size: 70%;
}

.summary_total_larger {
    white-space: nowrap;
    font-size: 75%;
}

    /*a.delbox {
        background-image: url( "../ig/images/x_blue.gif" );
    }

    a.delbox:hover {
        background-image: url( "../ig/images/x_blue_highlight.gif" );
    }

    a.maxbox {
        background-image: url( "../ig/images/max_blue.gif" );
    }

    a.maxbox:hover {
        background-image: url( "../ig/images/max_blue_highlight.gif" );
    }*/

/*  To Be Removed */

-->
</style>

<script src="http://timesheetmod.googlecode.com/svn/trunk/js/prototype.js" type="text/javascript"></script>
<script src="http://timesheetmod.googlecode.com/svn/trunk/js/scriptaculous.js" type="text/javascript"></script>
<script src="http://timesheetmod.googlecode.com/svn/trunk/js/BasicTime.js" type="text/javascript"></script>
<script src="http://timesheetmod.googlecode.com/svn/trunk/js/TimerEvent.js" type="text/javascript"></script>
<script src="http://timesheetmod.googlecode.com/svn/trunk/js/Total.js" type="text/javascript"></script>
<script src="http://timesheetmod.googlecode.com/svn/trunk/js/Task.js" type="text/javascript"></script>
<script src="http://timesheetmod.googlecode.com/svn/trunk/js/DateRecord.js" type="text/javascript"></script>
<!--<script src="http://qiladan.shackspace.com/ig/timesheet.js" type="text/javascript"></script>-->

<div id="taskContent" style="display:none">

    <div id="sync_div" style="clear:both;float:right; height:35px;">
        <div class="control addTaskControl" style="float:right; height:23px;" id="synchronise_calendar_div">
            <a href="javascript:backgroundObtainUserCalendars();">SYNCHRONISE WITH GOOGLE CALENDAR</a></div>
        <div id="sync_div_choice" class="modtitle tabtitle addTaskEntry">
            <select class="selectedtab tabtitle addTaskEntryTextbox" style="font-size: smaller;" id="calendar_choice">
            </select>
            <a href="javascript:closeSyncCal();" class="stealImage delbox"></a>
            <img onclick="backgroundSynchroniseWithGcal();" src="http://timesheetmod.googlecode.com/svn/trunk/images/calendar_sync.png" style="cursor:pointer;float:right;"/>
        </div>
    </div>
    <div id="controls" style="float:right;clear:both;width:100%;">
        <div class="control addTaskControl" id="add_task_control">
            <a href="javascript:addTask();">ADD TASK</a></div>
        <div id="add_task_entry" class="modtitle tabtitle addTaskEntry">
            <input class="selectedtab tabtitle addTaskEntryTextbox" type="text" id="new_task_name"/>
            <a href="javascript:closeAddTask();" class="stealImage delbox"></a>
            <a href="javascript:submitNewTaskName();" class="stealImage maxbox"></a></div>
    </div>
    <div id="calMessage" style="clear:both;float:right;margin-bottom:5px;width:100%;height:auto;display:none;">
    </div>
    <div id="task_list">
        <div id="title" class="title">
            <table id="timer_header_table" cellspacing="0" cellpadding="2">
                <tr>
                    <td id="no_handle" class="modtitle tabtitle invisihandle">&nbsp;</td>
                    <td id="task_name_title_div" class="modtitle title_heading task_name">TASK NAME</td>
                    <td id="total_time_title_div" class="modtitle title_heading total_time">TOTAL</td>
                    <td id="status_title_div" class="modtitle title_heading status">STATUS</td>
                    <td id="change_title_div" class="modtitle title_heading change">&nbsp;</td>
                </tr>
            </table>
        </div>
        <ul id="tasks">
        </ul>
        <div id="current_task" style="clear:both;">
            <br/>
            <table id="current_task_timer_header_table" cellspacing="0" cellpadding="2">
                <tr>
                    <td id="current_task_no_handle" class="modtitle tabtitle invisihandle" style="border: solid 1px;">&nbsp;</td>
                    <td id="current_task_title_td" class="modtitle title_heading task_name">CURRENT TASK DURATION</td>
                    <td id="current_task_total_time_td" class="task_data current_total_time">
                        <span id="current_task_total_time_span" style="width:100%">None</span>
                    </td>
                    <td id="current_task_status_title_div" class="title_heading status empty">&nbsp;</td>
                    <td id="current_task_change_title_div" class="title_heading change empty">&nbsp;</td>
                </tr>
            </table>
        </div>
    </div>

    <script type="text/javascript" language="javascript">
        Sortable.create('tasks', {handle:'handle',constraint:'vertical'})
    </script>

    <div id="errorMessages">
    </div>

    <div id="dataDiv" style="display:none;"><br/>
        <span id="event_data_23_heading">event_data_23 - </span>
        <span id="event_data_23">230707103435!|0:0:103438:103440||0:0:103442:103444||0:0:103729:105119|!|0:001354|</span>
        <br/>
        <span id="task_names_heading">task_names - </span>
        <span id="task_names">test2|test3</span>
        <br/>
        <span id="active_task_ids_heading">active_task_ids - </span>
        <span id="active_task_ids">0|1</span>
        <br/>
        <span id="current_event_heading">current_event - </span>
        <span id="current_event">1:230707105420</span>
        <br/>
        <span id="summary_round_heading">summary_round - </span>
        <span id="summary_round">15</span>
        <br/>
        <span id="summary_zero_duration_format_heading">summary_zero_duration_format - </span>
        <span id="summary_zero_duration_format">0</span>
        <br/>
        <span id="summary_format_heading">summary_format - </span>
        <span id="summary_format">0</span>
        <br/>
        <span id="start_day_of_week_heading">start_day_of_week - </span>
        <span id="start_day_of_week">M</span>
        <br/>
        <span id="hide_weekend_heading">hide_weekend - </span>
        <span id="hide_weekend">1</span>
        <br/>
        <span id="current_version_heading">current_version - </span>
        <span id="current_version">1</span>
        <br/>
        <span id="next_event_id_heading">next_event_id - </span>
        <span id="next_event_id">1</span>
        <br/>
        <span id="summary_date_format_heading">summary_date_format - </span>
        <span id="summary_date_format">1</span>
    </div>
</div>
<div id="summaryContent" style="display:none">
    <div id="summary">
        <div id="summary_controls"><br/>

            <div id="summary_previous" style="float:left;width:25%;text-align:left;">
                <span id="previous_control" class="control addTaskControl"><a href="javascript:drawPeriod(1);">PREVIOUS</a></span>
            </div>
            <div id="summary_display" style="float:left;width:49%;text-align:center;">
                <span id="summary_date_range" class="control controlNoHover" style="border: none;cursor:auto;"></span>
            </div>
            <div id="summary_next" style="float:left;width:25%;text-align:right;">
                <span id="next_control" class="control addTaskControl" style="visibility:hidden;"><a href="javascript:drawPeriod(0);">NEXT</a></span>
            </div>
        </div>
        <br clear="all"/>
        <table id="summary_table" cellspacing="0" cellpadding="0" style="clear:both;">
        </table>
    </div>
</div>

<script type="text/javascript">

function captureKeys(ev)
{
    var kCode;

    if (!ev)
    {
        ev = window.event;
    }
    kCode = ev.keyCode || ev.which;

	   // gets the keycode in ie or ns
    /* in ie, when pressing the ctrl + shift + key, it gives the key code for the capitalized key (probably because
    shift is pressed) in ns pressing ctrl, shift and another key doesn't change the keycode thus, the || and two different numbers */

    if (kCode == 13)
    { // ctrl+alt+s

        var target = ev.target || ev.srcElement;
        if (target.id == 'new_task_name')
        {
            submitNewTaskName(); // another function that does something
        }
        else if (target.id.indexOf("rename_text_") != -1)
        {
            target.blur();
//            replaceWithContent(ev.target);
        }
        return true;  // make it so the browser ignores key combo
    }
}

var syncing = false;
var obtainingUserCals = false;
var calMessage = new _IG_MiniMessage(__MODULE_ID__, _gel("calMessage"));
var currentMessage = null;

Calendar.prototype._name = null;
Calendar.prototype._url = null;

Calendar.prototype.getName = function()
{
    return this._name;
}
Calendar.prototype.getUrl = function()
{
    return this._url;
}

function Calendar(name, url)
{
    this._name = name;
    this._url = url;
}

function backgroundSynchroniseWithGcal()
{
    if (!syncing)
    {
        syncing = true;
        currentMessage = calMessage.createStaticMessage("Synchronising timesheet data with Google Calendar");
        showCalMessage();
        setTimeout("synchroniseWithGcal()", 10);
    }
}

function hideCalMessage()
{
    var calMessage = _gel("calMessage");
    calMessage.style.display = 'none';
}

function showCalMessage()
{
    var calMessage = _gel("calMessage");
    calMessage.style.display = 'block';
}

function backgroundObtainUserCalendars()
{
    if (!obtainingUserCals)
    {
        var currentTime = new Date();

        if (!lastCalendarUpdate || currentTime.getTime() - lastCalendarUpdate.getTime() > 600000)

        {
            obtainingUserCals = true;
            lastCalendarUpdate = currentTime;

            currentMessage = calMessage.createStaticMessage("Obtaining your Google calendars");
            showCalMessage();
            setTimeout("obtainUserCalendars()", 10);
        }
        else
        {
            var syncCalDiv = _gel("sync_div_choice");
            var syncCalControlDiv = _gel("synchronise_calendar_div");
            syncCalDiv.style.visibility = 'visible';
            syncCalControlDiv.style.display = 'none';
            syncCalDiv.style.display = 'block';
//            obtainingUserCals = false;
        }
    }
}

function obtainUserCalendars()
{
    // http://www.google.com/calendar/feeds/default/owncalendars/full
    var prefs = new _IG_Prefs(__MODULE_ID__);

    var httpReq = getBrowserRequestObject__MODULE_ID__("text/xml");
    var calUrl = httpType + "://" + domain + "/calendar/feeds/default/owncalendars/full";
    httpReq.open('get', calUrl, false);
    httpReq.setRequestHeader('Authorization', 'GoogleLogin auth=' + prefs.getString("calauth"));
    httpReq.setRequestHeader('Content-type', 'application/atom+xml');
    //    httpReq.onreadystatechange = parseUserCalendars(httpReq);
    httpReq.send(null);

    var status = httpReq.status;

    if (status != 200)
    {
        obtainAuthId__MODULE_ID__(httpReq);

        httpReq = getBrowserRequestObject__MODULE_ID__();
        httpReq.open('get', calUrl, false);
        httpReq.setRequestHeader('Authorization', 'GoogleLogin auth=' + prefs.getString("calauth"));
        httpReq.setRequestHeader('Content-type', 'application/atom+xml');
        httpReq.send(null);
        status = httpReq.status;
    }

    if (status == 200)
    {
        parseUserCalendars(httpReq);
    }
    else
    {
        var link = httpType + "://" + domain + "/calendar";
        var googleCalendarLink = "<a href='" + link + "' target='blank'>" + link + "</a>";
        calMessage.createDismissibleMessage("Error obtaining calendars - please ensure you have logged into Google calendar at "
                + googleCalendarLink, hideCalMessage);
    }
}

var calendars = null;
var lastCalendarUpdate = null;

function getNodeValue(obj, elementName)
{
    return obj.getElementsByTagName(elementName)[0].firstChild.nodeValue;
}
function getNodeAttribute(obj, elementName, attributeName)
{
    return obj.getElementsByTagName(elementName)[0].getAttribute(attributeName);
}
function createXMLFromString(xmlText)
{
    try
    {
        var xmlDocument = new ActiveXObject("MSXML.DomDocument");
        xmlDocument.loadXML(xmlText);
        return xmlDocument;
    }
    catch (e)
    {
        return null;
    }
}

function parseUserCalendars(httpReq)
{
    var responseXml = httpReq.responseXML;

    if (!responseXml || responseXml.getElementsByTagName("entry").length == 0)
    {
        responseXml = createXMLFromString(httpReq.responseText);
    }
    var entries = responseXml.getElementsByTagName("entry");

    calendars = new Array();

    for (var i = 0; i < entries.length; i++)
    {
        var name = getNodeValue(entries[i], "title");
        var url = null;

        var feeds = entries[i].getElementsByTagName("link");

        for (var j = 0; j < feeds.length; j++)
        {
            var feedName = feeds[j].getAttribute("rel");

            if (feedName == "alternate")
            {
                var localUrl = feeds[j].getAttribute("href");
                var calIndex = localUrl.indexOf("/calendar");
                url = httpType + "://" + domain + localUrl.slice(calIndex, localUrl.length);
            }
        }

        if (url)
        {
            var currentCal = new Calendar(name, url);
            calendars.push(currentCal);
        }
    }

    var localCalendars = calendars;
    localCalendars.sort(sortCalendars);

    var chooseCalendar = _gel("calendar_choice");
    var options = chooseCalendar.childNodes;

    var optionsLength = options.length;
    for (var i = 0; i < optionsLength; i++)
    {
        chooseCalendar.removeChild(options[0]);
    }

    var prefs = new _IG_Prefs(__MODULE_ID__);
    var lastCalendar = prefs.getString("last_calendar");

    for (var i = 0; i < localCalendars.length; i++)
    {
        var newOption = new Option(localCalendars[i].getName(), i);
        chooseCalendar.options[i] = newOption;

        if (localCalendars[i].getName() == lastCalendar)
        {
            chooseCalendar.selectedIndex = i;
        }
    }

    var syncCalDiv = _gel("sync_div_choice");
    var syncCalControlDiv = _gel("synchronise_calendar_div");
    syncCalDiv.style.visibility = 'visible';
    syncCalControlDiv.style.display = 'none';
    syncCalDiv.style.display = 'block';
    obtainingUserCals = false;

    calMessage.dismissMessage(currentMessage);
    hideCalMessage();
}

function sortCalendars(optionOne, optionTwo)
{
    var a = optionOne.getName();
    var b = optionTwo.getName();
    return a > b ? 1 : a < b ? -1 : 0;
}

function closeSyncCal()
{
    var syncCalDiv = _gel("sync_div_choice");
    var syncCalControlDiv = _gel("synchronise_calendar_div");
    syncCalDiv.style.visibility = 'hidden';
    syncCalControlDiv.style.display = 'block';
    syncCalDiv.style.display = 'none';
}

function synchroniseWithGcal()
{
    closeSyncCal();
    var calDropdown = _gel("calendar_choice");
    var selectedOption = calDropdown.options[calDropdown.selectedIndex];
    var selectedOptionValue = selectedOption.value;
    timesheetCalFeed = calendars[selectedOptionValue].getUrl();

    var prefs = new _IG_Prefs(__MODULE_ID__);
    var calendarName = selectedOption.text;
    prefs.set("last_calendar", calendarName);

    var today = new Date();
    var startDay = new Date();

    do
    {
        startTime = startDay.getTime();
        startTime -= 1000 * 60 * 60 * 24;
        startDay.setTime(startTime);
    }
    while (startDay.getDate() != today.getDate());

    var eventsToSync = new Array();
    var finished = false;

    while (!finished)
    {
        startTime = startDay.getTime();
        startTime += 1000 * 60 * 60 * 24;
        startDay.setTime(startTime);
        var dateRecord = monthsEvents[startDay.getDate()];

        if (dateRecord)
        {
            var events = dateRecord.getEvents();
            for (var k = 0; k < events.length; k++)
            {
                var event = events[k];
                if (!event.isSynced())
                {
                    eventsToSync.push(event);
                }
            }
        }

        finished = startDay.getDate() == today.getDate();
    }

    var dateRecordsToUpdate = new Array();
    var error = false;

    for (var i = 0; i < eventsToSync.length; i++)
    {
        var newEvent = new Array();
        var firstEvent = eventsToSync[i];
        newEvent.push(firstEvent);

        //        var j = 0;
        //        var findMore = false;
        //        do
        //        {
        //            var nextEvent = eventsToSync[i + ++j];
        //            if (nextEvent && firstEvent.getEventId() == nextEvent.getEventId())
        //            {
        //                newEvent.push(nextEvent);
        //                findMore = true;
        //            }
        //            else
        //            {
        //                findMore = false;
        //            }
        //        }
        //        while (findMore)
        //
        //        if (newEvent.length > 1)
        //        {
        //            i += (j - 1);
        //        }

        var taskName = getTaskName(firstEvent.getTask().getId());
        var startTime = firstEvent.getStart().toDate();
        var end = newEvent[newEvent.length - 1].getEnd();
        var endTime;
        if (end)
        {
            endTime = end.toDate();
        }

        var createEvent = end && (endTime.getTime() - startTime.getTime()) > 60000;

        var created = false;
        if (createEvent)
        {
            created = createEvent__MODULE_ID__(taskName, firstEvent.getEventId(), startTime, endTime);
        }
        //        alert("Created [" + created + "]");

        if (created || !createEvent)
        {
            for (var k = 0; k < newEvent.length; k++)
            {
                var event = newEvent[k];
                event.setSynced(true);
                var dateRecordId = eval(event.getDateRecord().getDate().getDate());
                dateRecordsToUpdate[dateRecordId] = event.getDateRecord();
            }
        }

        if (!created && createEvent)
        {
            error = true;
            break;
        }
    }

    for (var l = 0; l < dateRecordsToUpdate.length; l++)
    {
        var dateRecordToUpdate = dateRecordsToUpdate[l];

        if (dateRecordToUpdate)
        {
            updateDateRecord(dateRecordToUpdate);
        }
    }

    syncing = false;

    calMessage.dismissMessage(currentMessage);
    if (!error)
    {
        _IG_Analytics("UA-2305736-1", "/timesheetmod/gcal_synchronisation");
        calMessage.createTimerMessage("Timesheet data synchronised", 5, hideCalMessage);
    }
    else
    {
        var link = httpType + "://" + domain + "/calendar";
        var googleCalendarLink = "<a href='" + link + "' target='blank'>" + link + "</a>";
        calMessage.createDismissibleMessage("Error synchronising timesheet data - please ensure you have logged into Google calendar at "
                + googleCalendarLink, hideCalMessage);
    }
}

var currentTimeTimer = null;

function monitorCurrentTime()
{
    var currentData = getTodaysEventData();
    var date = new Date();

    if (date.getDate() != currentData.getDate().getDate())
    {
        var activeTaskIds = getArray("active_task_ids");

        if (activeTaskIds)
        {
            for (var i = 0; i < activeTaskIds.length; i++)
            {
                var taskId = activeTaskIds[i];
                var timeSpan = _gel("total_time_span_" + taskId);
                var total = getTodaysEventData().getTotalForTask(taskId);
                var totalDuration = null;

                if (total)
                {
                    totalDuration = total.getDuration();
                }

                timeSpan.innerHTML = getDurationDisplayString(totalDuration);
            }
        }
    }

    currentTimeTimer = setTimeout("monitorCurrentTime()", 1000);
}

var monthsEvents = new Array();
var todaysEventData = null;
var nextEventId = null;

function getNextEventId()
{
    var eventId = ++nextEventId;

    var prefs = new _IG_Prefs(__MODULE_ID__);
    prefs.set("next_event_id", eventId);

    return eventId;
}

function getDateRecord(date, persistIfOutOfDate)
{
    var today = new Date();
    var currentDate = date.getDate();
    var dateRecord = monthsEvents[currentDate];

    var dateCorrectedMonth = date.getMonth() + 1;
    if (!dateRecord || eval(dateRecord.getDate().getMonth()) != dateCorrectedMonth)
    {
        var prefs = new _IG_Prefs(__MODULE_ID__);
        var existingDateRecordString = prefs.getString("event_data_" + currentDate);

        var existingDateRecord;
        if (existingDateRecordString && _trim(existingDateRecordString).length > 0)
        {
            existingDateRecord = new DateRecord();
            existingDateRecord.setDataFromString(existingDateRecordString);
        }

        if (existingDateRecord && existingDateRecord.getDate().getMonth() == dateCorrectedMonth)
        {
            dateRecord = existingDateRecord;
        }
        else
        {
            dateRecord = new DateRecord();
            var newDate = new BasicTime();
            newDate.setDataFromDate(date);
            dateRecord.setDate(newDate);
            monthsEvents[currentDate] = dateRecord;
            if (persistIfOutOfDate)
            {
                updateDateRecord(dateRecord);
            }
        }
    }

    var dateRecordDate = eval(dateRecord.getDate().getDate());
    var dateRecordMonth = eval(dateRecord.getDate().getMonth());
    if (dateRecordDate == today.getDate() && dateRecordMonth == (today.getMonth() + 1))
    {
        todaysEventData = dateRecord;
    }

    return dateRecord;
}

function getTodaysEventData()
{
    return todaysEventData;
}

function getArray(prefName)
{
    var prefs = new _IG_Prefs(__MODULE_ID__);

    var arrayData = prefs.getString(prefName);

    if (arrayData && _trim(arrayData).length > 0)
    {
        return arrayData.split("|");
    }
    else
    {
        return null;
    }
}

function setArray(prefName, arrayData)
{
    var prefs = new _IG_Prefs(__MODULE_ID__);
    prefs.set(prefName, arrayData.join("|"));
}

function getTaskName(taskId)
{
    var allTaskNames = getArray("task_names");

    var name = null;

    if (allTaskNames)
    {
        name = allTaskNames[taskId];
    }

    return name;
}

var currentEvent;
var timer;
var taskOrderTimer = null;

function monitorTaskOrder()
{
    var taskList = _gel("tasks");

    var tasks = taskList.childNodes;
    var activeTaskIds = getArray("active_task_ids");

    if (activeTaskIds && activeTaskIds.length > 0 && tasks.length == activeTaskIds.length)
    {
        var newOrder = new Array();
        for (var i = 0; i < tasks.length; i++)
        {
            var idSplit = tasks[i].id.split("_");
            newOrder[i] = idSplit[idSplit.length - 1];
        }

        var currentData = activeTaskIds.join("|");
        var newData = newOrder.join("|");

        if (newData != currentData)
        {
            setArray("active_task_ids", newOrder);
        }
    }

    taskOrderTimer = setTimeout("monitorTaskOrder()", 5000);
}

function displayTaskTimers()
{
    _IG_Analytics("UA-2305736-1", "/timesheetmod/display_task_timers");
}

function startStopTimer(source)
{
    var nameSplit = source.id.split("_");
    var taskId = eval(nameSplit[nameSplit.length - 1]);
    var currentTime = new Date();
    var prefs = new _IG_Prefs(__MODULE_ID__);

    if (currentEvent)
    {
        clearTimeout(timer);
        if (!currentEvent.getEnd())
        {
            var endTime = new BasicTime();
            endTime.setDataFromDate(currentTime);
            currentEvent.setEnd(endTime);
        }

        var oldTaskId = currentEvent.getTask().getId();
        var timersButton = _gel("status_div_" + oldTaskId);
        timersButton.innerHTML =
        '<img src="http://timesheetmod.googlecode.com/svn/trunk/images/start.png" alt="Start"/>';

        prefs.set("current_event", "");
        addNewEvent(currentEvent);
        var timeSpan = _gel("total_time_span_" + oldTaskId);
        var currentTotalTimeSpan = _gel("current_task_total_time_span");
        var total = getTodaysEventData().getTotalForTask(oldTaskId);
        var totalDuration = total.getDuration();

        timeSpan.innerHTML = getDurationDisplayString(totalDuration);
        timeSpan.className = "";
        currentTotalTimeSpan.className = "";
        currentTotalTimeSpan.innerHTML = "None";

        _IG_Analytics("UA-2305736-1", "/timesheetmod/new_event");
    }

    if (!currentEvent || currentEvent.getTask().getId() != taskId)
    {
        currentEvent = new TimerEvent();
        var task = new Task();
        task.setId(taskId);

        var startTime = new BasicTime();
        startTime.setDataFromDate(currentTime);
        currentEvent.setTask(task);
        currentEvent.setStart(startTime);

        source.innerHTML = '<img src="http://timesheetmod.googlecode.com/svn/trunk/images/stop.png" alt="Stop"/>';
        prefs.set("current_event", currentEvent.toString());
        refreshCurrentTimer();
    }
    else
    {
        currentEvent = null;
    }
}

function addNewEvent(event)
{
    var eventsToAdd = event.splitDates();

    for (var i = 0; i < eventsToAdd.length; i++)
    {
        var newEvent = eventsToAdd[i];
        var startDate = newEvent.getStart().toDate();

        var dateRecord = getDateRecord(startDate, true);
        dateRecord.addNewEvent(newEvent);
        updateDateRecord(dateRecord);
    }
}

/**
 * Creates a new event in Google calendar.
 * @param eventTask The event task to sync.
 */
function createEvent__MODULE_ID__(taskName, eventId, start, end)
{
    var eventXML = "";

    eventXML += "<?xml version='1.0' encoding='UTF-8'?>\n";
    eventXML +=
    "<entry xmlns='http://www.w3.org/2005/Atom' xmlns:gCal='http://schemas.google.com/gCal/2005' xmlns:gd='http://schemas.google.com/g/2005'>\n";
    eventXML +=
    "<category scheme='http://schemas.google.com/g/2005' term='http://schemas.google.com/g/2005#event'></category>\n";
    eventXML +=
    "<category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/g/2005#event'></category>\n";
    eventXML += "<title type='text'>" + taskName + "</title>\n";
    eventXML += "<content type='text'>Timesheet Event + " + eventId + "</content>\n";
    eventXML += "<gd:eventStatus value='http://schemas.google.com/g/2005#event.confirmed'></gd:eventStatus>\n";
    eventXML += "<gd:visibility value='http://schemas.google.com/g/2005#event.default'></gd:visibility>\n";
    eventXML += "<gd:transparency value='http://schemas.google.com/g/2005#event.opaque'></gd:transparency>\n";
    eventXML += "<gCal:sendEventNotifications value='false'></gCal:sendEventNotifications>\n";

    var startTime = start.getFullYear() + "-" + getFormattedNumber(start.getMonth() + 1) + "-"
            + getFormattedNumber(start.getDate());
    startTime += "T" + getFormattedNumber(start.getHours()) + ":" + getFormattedNumber(start.getMinutes());
    startTime += ":00.000+01:00";
    var endTime = end.getFullYear() + "-" + getFormattedNumber(end.getMonth() + 1) + "-"
            + getFormattedNumber(end.getDate());
    endTime += "T" + getFormattedNumber(end.getHours()) + ":" + getFormattedNumber(end.getMinutes())
    endTime += ":00.000+01:00";

    eventXML += "<gd:when startTime='" + startTime + "' endTime='" + endTime + "'></gd:when>\n";
    eventXML += "<gd:where></gd:where>\n";
    eventXML += "</entry>\n";

    var prefs = new _IG_Prefs(__MODULE_ID__);

    var httpReq = getBrowserRequestObject__MODULE_ID__();
    var calUrl;
    if (timesheetCalFeed)
    {
        calUrl = timesheetCalFeed;
    }
    else
    {
        calUrl = httpType + "://" + domain + "/calendar/feeds/default/private/full";
    }
    httpReq.open('POST', calUrl, false);
    httpReq.setRequestHeader('Authorization', 'GoogleLogin auth=' + prefs.getString("calauth"));
    httpReq.setRequestHeader('Content-type', 'application/atom+xml');
    httpReq.send(eventXML);

    var status = httpReq.status;

    if (status != 201)
    {
        obtainAuthId__MODULE_ID__(httpReq);

        httpReq = getBrowserRequestObject__MODULE_ID__();
        httpReq.open('POST', calUrl, false);
        httpReq.setRequestHeader('Authorization', 'GoogleLogin auth=' + prefs.getString("calauth"));
        httpReq.setRequestHeader('Content-type', 'application/atom+xml');
        httpReq.send(eventXML);
        status = httpReq.status;
    }

    return status == 201;
}

/**
 * Obtains the authentication ID for Google calendar out of the current request object.
 *
 * A big thank you to Chris McKeever (http://www.r2unit.com), from whose code I originally worked out how to obtain this
 * data.
 *
 * @param httpReq The current request object.
 */
function obtainAuthId__MODULE_ID__(httpReq)
{
    var auth = new Array;
    var cookieHeader = httpReq.getResponseHeader('Set-Cookie');
    if (cookieHeader)
    {
        auth = cookieHeader.split(";");
    }

    var prefs = new _IG_Prefs(__MODULE_ID__);

    if (auth && auth.length)
    {
        var regularExpression = /[^=]*$/;
        prefs.set("calauth", regularExpression.exec(auth[0]));
    }
}

/**
 * Obtains a browser-specific XML HTTP request object.
 *
 * @return browserObject The XML HTTP request object.
 */
function getBrowserRequestObject__MODULE_ID__(mimetype)
{
    var requestObject;
    if (window.XMLHttpRequest)
    {
        requestObject = new XMLHttpRequest();
        if (mimetype && requestObject.overrideMimeType)
        {
            requestObject.overrideMimeType(mimetype);
        }
    }
    else
    {
        requestObject = new ActiveXObject("Microsoft.XMLHTTP");
    }
    return requestObject;
}

function refreshCurrentTimer()
{
    var taskId = currentEvent.getTask().getId();
    var currentTime = new Date();

    var timeSpan = _gel("total_time_span_" + taskId);
    var currentTotalTimeSpan = _gel("current_task_total_time_span");
    timeSpan.className = "currentTimer";
    currentTotalTimeSpan.className = "currentTimer";

    var endTime = new BasicTime();
    endTime.setDataFromDate(currentTime);
    currentEvent.setEnd(endTime);

    var eventDuration = currentEvent.getDuration();

    var tempDuration = new BasicTime();

    var total = getTodaysEventData().getTotalForTask(taskId);
    if (total)
    {
        var totalDuration = total.getDuration();
        tempDuration.addSeconds(totalDuration.getSeconds());
        tempDuration.addMinutes(totalDuration.getMinutes());
        tempDuration.addHours(totalDuration.getHours());
    }

    tempDuration.addSeconds(eventDuration.getSeconds());
    tempDuration.addMinutes(eventDuration.getMinutes());
    tempDuration.addHours(eventDuration.getHours());

    currentTotalTimeSpan.innerHTML = getDurationDisplayString(eventDuration);

    if (currentEvent.getStart().getDate() != currentEvent.getEnd().getDate())
    {
        tempDuration.setHours(currentEvent.getEnd().getHours());
        tempDuration.setMinutes(currentEvent.getEnd().getMinutes());
        tempDuration.setSeconds(currentEvent.getEnd().getSeconds());
    }

    timeSpan.innerHTML = getDurationDisplayString(tempDuration);

    timer = setTimeout("refreshCurrentTimer()", 1000);
}

function getDurationDisplayString(duration)
{
    var durationString;
    if (duration)
    {
        durationString = duration.getHours() + "h " + duration.getMinutes() + "m " + duration.getSeconds() + "s";
    }
    else
    {
        durationString = "00h 00m 00s";
    }
    return durationString;
}

function replaceWithTextBox(source)
{
    source.onclick = null;
    var currentContent = source.innerHTML;

    var nameSplit = source.id.split("_");
    var taskId = eval(nameSplit[nameSplit.length - 1]);

    var textElementId = "rename_text_" + taskId;
    source.innerHTML = "<input class='editTaskName' type=\'text\' id=\'" + textElementId + "\' onBlur=\'replaceWithContent(this);\'/>";

    var textElement = _gel(textElementId);
    if (window.XMLHttpRequest && !document.all)
    {
        textElement.className = "editTaskNameSmaller";
    }

    if (currentContent != '&nbsp;')
    {
        textElement.value = currentContent;
    }
    textElement.select();
}

function updateDateRecord(dateRecord)
{
    var prefs = new _IG_Prefs(__MODULE_ID__);
    prefs.set("event_data_" + eval(dateRecord.getDate().getDate()), dateRecord.toString());
}

var currentVersion__MODULE_ID__ = 2;

var localSessionId = (new Date()).getTime();

function checkSessionStatus()
{
    var cookiePrefs = document.cookie.split(";");
    var sessionId = null;
    var cookieName = "session_id=";

    for (var i = 0; i < cookiePrefs.length; i++)
    {
        var current = _trim(cookiePrefs[i]);
        if (current.indexOf(cookieName) == 0)
        {
            sessionId = current.substring(cookieName.length, current.length);
        }
    }

    if (sessionId != localSessionId)
    {
        disableGadget();
    }
    else
    {
        setTimeout("checkSessionStatus()", 5000);
    }
}

function disableGadget()
{
    tabs.displayTabs(false);

    var mainDiv = _gel("m_" + __MODULE_ID__ + "_b");

    var disabledGadgetDiv = document.createElement("div");
    disabledGadgetDiv.id = "disabled_gadget_div";
    disabledGadgetDiv.style.display = "block";
    disabledGadgetDiv.style.visibility = "visible";
    //noinspection StringLiteralBreaksHTMLJS
    disabledGadgetDiv.innerHTML =
    "The timesheet gadget has been disabled to protect your timesheet data, as another instance is currently running in another tab/window.<br/><br/>To enable the gadget again, please refresh the page by clicking <a class='modboxin' style='border:0px none;margin:0px;padding:0px;' href='javaScript:location.reload(true);'>here</a>.";
    mainDiv.appendChild(disabledGadgetDiv);

    var activeTasks = getArray("active_task_ids");
    var taskList = _gel("tasks");

    for (var i = 0; i < activeTasks.length; i++)
    {
        var taskId = activeTasks[i];
        var rowToRemove = _gel("li_row_" + taskId);
        taskList.removeChild(rowToRemove);
    }

    if (currentTimeTimer)
    {
        clearTimeout(currentTimeTimer);
        currentTimeTimer = null;
    }
    if (taskOrderTimer)
    {
        clearTimeout(taskOrderTimer);
        taskOrderTimer = null;
    }
}

function setSessionId()
{
    document.cookie = "session_id=" + localSessionId;
}

var tabs = null;

function createTabs()
{
    if (!tabs)
    {
        tabs = new _IG_Tabs(__MODULE_ID__, "Today");
        tabs.addTab("Today", "taskContent", displayTaskTimers);
        tabs.addTab("Summary", "summaryContent", initialiseSummary);
        tabs.alignTabs("left", 3);
    }
    else
    {
        tabs.displayTabs(true);
    }
}

var domain = null;
var httpType = null;
var timesheetCalFeed = null;

function initialise()
{
    document.onkeypress = captureKeys;
    _IG_Analytics("UA-2305736-1", "/timesheetmod");
    domain = document.domain;
    httpType = document.location.toString().match(/[^:]*/);

    var disabledGadgetDiv = _gel("disabled_gadget_div");
    if (disabledGadgetDiv)
    {
        var mainDiv = _gel("m_" + __MODULE_ID__ + "_b");
        mainDiv.removeChild(disabledGadgetDiv);
    }
    //    disabledGadgetDiv.style.display = "none";
    setSessionId();
    initialiseTaskList();
    createTabs();
    setTimeout("checkSessionStatus()", 10000);
}

function initialiseTaskList()
{
    var prefs = new _IG_Prefs(__MODULE_ID__);
    var currentVersion = prefs.getInt("current_version");
    nextEventId = prefs.getInt("next_event_id");

    if (!nextEventId)
    {
        nextEventId = 1;
        prefs.set("next_event_id", nextEventId);
    }

    for (var i = 1; i < 32; i++)
    {
        var eventDataString = prefs.getString("event_data_" + i);
        var eventData = new DateRecord();
        if (eventDataString)
        {
            var errorDetectedAndFixed = eventData.setDataFromString(eventDataString, currentVersion);
            monthsEvents[i] = eventData;

            if (!currentVersion || currentVersion__MODULE_ID__ != currentVersion || errorDetectedAndFixed)
            {
                if (!errorDetectedAndFixed)
                {
                    updateDateRecord(eventData);
                }
                else
                {
                    alert("Error with input string [" + eventDataString + "]");
                }
            }
        }
    }

    if (!currentVersion || currentVersion__MODULE_ID__ != currentVersion)
    {
        prefs.set("current_version", currentVersion__MODULE_ID__);
    }

    var today = new Date();
    getDateRecord(today, true);

    var activeTaskIds = getArray("active_task_ids");

    if (activeTaskIds && activeTaskIds.length > 0)
    {
        for (i = 0; i < activeTaskIds.length; i++)
        {
            createNewTask(activeTaskIds[i], false);
        }

        var currentEventData = prefs.getString("current_event");

        if (currentEventData && _trim(currentEventData).length > 0)
        {
            currentEvent = new TimerEvent();
            currentEvent.setDataFromString(currentEventData);

            var taskId = currentEvent.getTask().getId();

            if (taskId && taskId != "undefined")
            {
                var statusControl = _gel("status_div_" + taskId);
                statusControl.innerHTML =
                '<img src="http://timesheetmod.googlecode.com/svn/trunk/images/stop.png" alt="Stop"/>';
                refreshCurrentTimer();
            }
            else
            {
                currentEvent = null;
                prefs.set("current_event", "");
            }
        }
    }
    else
    {
        displayNoTaskMessage(true);
    }

    monitorTaskOrder();
    monitorCurrentTime();
}

function displayNoTaskMessage(display)
{
    var timerHeaderTable = _gel("timer_header_table");
    var messageRow = _gel("no_task_message");

    if (!messageRow && display)
    {
        var lastRow = timerHeaderTable.rows.length;
        var newMessageRow = timerHeaderTable.insertRow(lastRow);
        newMessageRow.id = "no_task_message";

        var noHandleTd = document.createElement("td");
        var messageTd = document.createElement("td");
        noHandleTd.className = "modtitle tabtitle task_data invisihandle";
        messageTd.className = "selectedtab tabtitle task_data";
        messageTd.colSpan = "4";

        noHandleTd.innerHTML = "&nbsp;";
        messageTd.innerHTML = "There are currently no enabled tasks.";

        newMessageRow.appendChild(noHandleTd);
        newMessageRow.appendChild(messageTd);

        newMessageRow.style.visibility = "visible";
    }
    else if (messageRow && !display)
    {
        var rowIndex = messageRow.sectionRowIndex;
        timerHeaderTable.deleteRow(rowIndex);
    }
}

function replaceWithContent(source)
{
    var nameSplit = source.id.split("_");
    var taskId = eval(nameSplit[nameSplit.length - 1]);

    var containingDiv = _gel("name_div_" + taskId);
    var taskName = _trim(source.value);
    var textEntry = _gel("rename_text_" + taskId);

    if (taskName.length == 0)
    {
        var miniMessage = new _IG_MiniMessage(__MODULE_ID__, _gel("errorMessages"));
        miniMessage.createTimerMessage("Please enter a task name", 2);
        textEntry.focus();
    }
    else
    {
        var existingTaskId = getTaskId(taskName);
        var existingTaskName = getTaskName(existingTaskId);

        if (existingTaskId == taskId || !existingTaskName)
        {
            setTaskName(taskId, taskName);
            containingDiv.innerHTML = taskName;
            containingDiv.onclick = function()
            {
                replaceWithTextBox(this);
            };
        }
        else if (isActiveTask(existingTaskId))
        {
            var miniMessage = new _IG_MiniMessage(__MODULE_ID__, _gel("errorMessages"));
            miniMessage.createTimerMessage("There is already an active task with that name, please enter another.", 4);
            textEntry.focus();
        }
        else
        {
            var choice = confirm("There is already an existing task with this name, would you like to switch to it?")

            if (choice)
            {
                _IG_Analytics("UA-2305736-1", "/timesheetmod/task_replaced_with_existing");

                if (currentEvent)
                {
                    startStopTimer(_gel("status_div_" + currentEvent.getTask().getId()));
                }

                containingDiv.innerHTML = taskName;
                containingDiv.onclick = function()
                {
                    replaceWithTextBox(this);
                };

                var taskRow = _gel("li_row_" + taskId);
                taskRow.id = "li_row_" + existingTaskId;
                var html = taskRow.innerHTML;
                var regex = new RegExp("_" + taskId, "g");
                var regex2 = new RegExp("disableTask\\(" + taskId, "g");
                html = html.replace(regex, "_" + existingTaskId);
                html = html.replace(regex2, "disableTask(" + existingTaskId);
                taskRow.innerHTML = html;

                var nameDiv = _gel("name_div_" + existingTaskId);
                var statusDiv = _gel("status_div_" + existingTaskId);
                nameDiv.onclick = function()
                {
                    replaceWithTextBox(this);
                };
                statusDiv.onclick = function()
                {
                    startStopTimer(this);
                };

                var totalSpan = _gel("total_time_span_" + existingTaskId);
                var total = getTodaysEventData().getTotalForTask(existingTaskId);

                var durationString;
                if (total)
                {
                    durationString = getDurationDisplayString(total.getDuration());
                }
                else
                {
                    durationString = getDurationDisplayString();
                }

                totalSpan.innerHTML = durationString;

                var activeTaskIds = getArray("active_task_ids");

                for (var i = 0; i < activeTaskIds.length; i++)
                {
                    var activeTaskId = activeTaskIds[i];
                    if (taskId == activeTaskId)
                    {
                        activeTaskIds[i] = "" + existingTaskId;
                    }
                }

                setArray("active_task_ids", activeTaskIds);

                Sortable.create('tasks', {handle:'handle',constraint:'vertical'});
            }
        }
    }
}

function setTaskName(taskId, taskName)
{
    var taskNamesPref = "task_names";
    var allTaskNames = getArray(taskNamesPref);

    if (!allTaskNames)
    {
        allTaskNames = new Array();
    }
    allTaskNames[taskId] = taskName;
    setArray(taskNamesPref, allTaskNames);
}

function addTask()
{
    var addTaskDiv = _gel("add_task_entry");
    var addTaskControlDiv = _gel("add_task_control");
    addTaskDiv.style.visibility = 'visible';
    addTaskControlDiv.style.display = 'none';
    addTaskDiv.style.display = 'block';
    var newTaskName = _gel("new_task_name");
    newTaskName.focus();
}

function closeAddTask()
{
    var addTaskDiv = _gel("add_task_entry");
    var newTaskName = _gel("new_task_name");
    newTaskName.value = '';
    addTaskDiv.style.display = 'none';
    var addTaskControlDiv = _gel("add_task_control");
    addTaskControlDiv.style.display = 'block';
}

function disableTask(taskId, prompt)
{
    var choice = false;

    if (prompt)
    {
        choice = confirm("Are you sure you wish to disable this task?")
    }

    if (choice || !prompt)
    {
        if (currentEvent)
        {
            var timerTaskId = currentEvent.getTask().getId();
            if (timerTaskId == taskId)
            {
                var timersButton = _gel("status_div_" + timerTaskId);
                startStopTimer(timersButton);
            }
        }

        var taskList = _gel("tasks");
        var rowToRemove = _gel("li_row_" + taskId);
        taskList.removeChild(rowToRemove);

        removeTaskFromActiveList(taskId);
    }
}

function removeTaskFromActiveList(taskId)
{
    var activeTaskIds = getArray("active_task_ids");

    var newActiveTaskIds = new Array();

    for (var i = 0, j = 0; i < activeTaskIds.length; i++)
    {
        var activeTaskId = activeTaskIds[i];
        if (taskId != activeTaskId)
        {
            newActiveTaskIds[j++] = activeTaskId;
        }
    }

    if (newActiveTaskIds.length == 0)
    {
        displayNoTaskMessage(true);
    }

    setArray("active_task_ids", newActiveTaskIds);
}

function submitNewTaskName()
{
    var newTaskName = _gel("new_task_name");
    var taskName = _trim(newTaskName.value);

    if (taskName.length == 0)
    {
        var miniMessage = new _IG_MiniMessage(__MODULE_ID__, _gel("errorMessages"));
        miniMessage.createTimerMessage("Please enter a task name", 2);
        newTaskName.focus();
    }
    else
    {
        var taskId = getTaskId(taskName);
        setTaskName(taskId, taskName);

        if (isActiveTask(taskId))
        {
            var miniMessage = new _IG_MiniMessage(__MODULE_ID__, _gel("errorMessages"));
            miniMessage.createTimerMessage("There is already an active task with that name, please enter another.", 4);
            newTaskName.focus();
        }
        else
        {
            closeAddTask();
            createNewTask(taskId, true);
        }
    }
}

function isActiveTask(taskId)
{
    var activeTaskIds = getArray("active_task_ids");

    var found = false;

    if (activeTaskIds && activeTaskIds.length > 0)
    {
        for (var i = 0; i < activeTaskIds.length && !found; i++)
        {
            if (activeTaskIds[i] == taskId)
            {
                found = true;
            }
        }
    }

    return found;
}

function addActiveTask(taskId)
{
    var activeTaskIds = getArray("active_task_ids");

    if (!activeTaskIds)
    {
        activeTaskIds = new Array();
    }

    activeTaskIds[activeTaskIds.length] = "" + taskId;
    setArray("active_task_ids", activeTaskIds);
}

function getTaskId(taskName)
{
    var allTaskNames = getArray("task_names");
    var taskId = 0;

    if (allTaskNames)
    {
        for (; taskId < allTaskNames.length; taskId++)
        {
            if (allTaskNames[taskId] == taskName)
            {
                allTaskNames[taskId] = taskName;
                break;
            }
        }
    }

    return taskId;
}

function createNewTask(taskId, setActiveTaskData)
{
    displayNoTaskMessage(false);

    if (setActiveTaskData)
    {
        addActiveTask(taskId);
        _IG_Analytics("UA-2305736-1", "/timesheetmod/new_task_added");
    }
    var taskList = _gel("tasks");
    var listRow = document.createElement("li")
    var taskTable = document.createElement("table");
    var lastRow = taskTable.rows.length;
    var taskRow = taskTable.insertRow(lastRow);

    var handleTd = document.createElement("td");
    var handleDiv = document.createElement("div");
    var handleImage = document.createElement("img");
    var nameTd = document.createElement("td");
    var nameDiv = document.createElement("div");
    var totalTimeTd = document.createElement("td");
    var totalTimeSpan = document.createElement("span");
    var statusTd = document.createElement("td");
    var statusDiv = document.createElement("div");
    var disableTd = document.createElement("td");

    listRow.id = "li_row_" + taskId;
    listRow.style.position = 'relative';
    taskTable.id = "table_" + taskId;
    taskRow.id = "row_" + taskId;
    handleTd.id = "handle_td_" + taskId;
    handleTd.className = "modtitle tabtitle handle";
    handleDiv.id = "handle_div_" + taskId;
    handleDiv.className = "handle_image";
    nameTd.id = "name_td_" + taskId;
    nameTd.className = 'task_data task_name';
    nameDiv.id = "name_div_" + taskId;
    nameDiv.style.width = "100%";
    nameDiv.onclick = function()
    {
        replaceWithTextBox(this);
    };
    totalTimeTd.id = "total_time_td_" + taskId;
    totalTimeTd.className = 'task_data total_time';
    totalTimeSpan.id = "total_time_span_" + taskId;
    totalTimeSpan.style.width = "100%"
    statusTd.id = "status_td_" + taskId;
    statusTd.className = 'task_data status control';
    statusDiv.id = "status_div_" + taskId;
    statusDiv.onclick = function()
    {
        startStopTimer(this);
    };
    disableTd.id = "disable_td_" + taskId;
    disableTd.className = 'task_data change';

    var taskName = getTaskName(taskId);

    handleDiv.innerHTML = "&nbsp;";
    nameDiv.innerHTML = taskName;
    var total = getTodaysEventData().getTotalForTask(taskId);
    if (total)
    {
        totalTimeSpan.innerHTML = getDurationDisplayString(total.getDuration());
    }
    else
    {
        totalTimeSpan.innerHTML = getDurationDisplayString();
    }
    statusDiv.innerHTML = '<img src="http://timesheetmod.googlecode.com/svn/trunk/images/start.png" alt="Start"/>';
    disableTd.innerHTML = '<a href="javascript:disableTask(' + taskId + ', true);" class="delbox stealImage"></a>';

    handleTd.appendChild(handleDiv);
    taskRow.appendChild(handleTd);
    nameTd.appendChild(nameDiv);
    taskRow.appendChild(nameTd);
    totalTimeTd.appendChild(totalTimeSpan);
    taskRow.appendChild(totalTimeTd);
    statusTd.appendChild(statusDiv)
    taskRow.appendChild(statusTd);
    taskRow.appendChild(disableTd);

    listRow.appendChild(taskTable);
    listRow.style.display = "none";

    taskList.appendChild(listRow);

    Effect.BlindDown(listRow.id);
    Sortable.create('tasks', {handle:'handle',constraint:'vertical'})
}

function initialiseSummary()
{
    _IG_Analytics("UA-2305736-1", "/timesheetmod/display_summary");
    drawPeriod(0);
}

function getFormattedDateString(date)
{
    var prefs = new _IG_Prefs(__MODULE_ID__);
    var dateFormat = prefs.getInt("summary_date_format");

    var dateString;
    if (dateFormat == 1)
    {
        dateString = getFormattedNumber(date.getDate()) + "/" + getFormattedNumber(date.getMonth() + 1) + "/"
                + getFormattedNumber(date.getYear());
    }
    else
    {
        dateString = getFormattedNumber(date.getMonth() + 1) + "/" + getFormattedNumber(date.getDate()) + "/"
                + getFormattedNumber(date.getYear());
    }

    return dateString;
}

function drawPeriod(week)
{
    var dateShift = 7 * week;
    var startDate = new Date();

    // <a href="javascript:drawPeriod(1);">PREVIOUS WEEK</a>

    var previousControl = _gel("previous_control");
    var nextControl = _gel("next_control");

    switch (week)
            {
        case 0:
        {
            nextControl.style.visibility = "hidden";
            previousControl.style.visibility = "visible";
            break;
        }
        case 1:
        {
            nextControl.style.visibility = "visible";
            previousControl.style.visibility = "visible";
            break;
        }
        case 2:
        {
            nextControl.style.visibility = "visible";
            previousControl.style.visibility = "visible";
            break;
        }
        case 3:
        {
            nextControl.style.visibility = "visible";
            previousControl.style.visibility = "hidden";
            break;
        }
    }

    previousControl.innerHTML = '<a href="javascript:drawPeriod(' + (week + 1) + ');">PREVIOUS</a>'
    nextControl.innerHTML = '<a href="javascript:drawPeriod(' + (week - 1) + ');">NEXT</a>'

    var startDateValue = startDate.getTime();

    var dayOfWeekShift;

    var dayOfWeekString = startDate.toString().slice(0, 3);

    switch (dayOfWeekString)
            {
        case "Mon" : {
            dayOfWeekShift = 0;
            break;
        }
        case "Tue" : {
            dayOfWeekShift = 1;
            break;
        }
        case "Wed" : {
            dayOfWeekShift = 2;
            break;
        }
        case "Thu" : {
            dayOfWeekShift = 3;
            break;
        }
        case "Fri" : {
            dayOfWeekShift = 4;
            break;
        }
        case "Sat" : {
            dayOfWeekShift = 5;
            break;
        }
        case "Sun" : {
            dayOfWeekShift = 6;
            break;
        }
    }

    var prefs = new _IG_Prefs(__MODULE_ID__);
    var startDayOfWeek = prefs.getString("start_day_of_week");
    var hideWeekend = prefs.getInt("hide_weekend");

    if (startDayOfWeek == 'S' && hideWeekend == 0)
    {
        dayOfWeekShift++;
    }

    startDateValue -= (1000 * 60 * 60 * 24) * (dateShift + dayOfWeekShift);
    startDate.setTime(startDateValue);

    var firstDay = getFormattedDateString(startDate);

    var eventDataArray = new Array();
    var taskIds = new Array();
    var numberOfDatesToRetrieve = hideWeekend == 0 ? 7 : 5;

    for (var i = 0; i < numberOfDatesToRetrieve; i++)
    {
        var eventData = getDateRecord(startDate, false);
        eventDataArray[i] = eventData;

        var totals = eventData.getTotals();

        for (var j = 0; j < totals.length; j++)
        {
            taskIds[totals[j].getTask().getId()] = true;
        }
        startDateValue += 1000 * 60 * 60 * 24;
        startDate.setTime(startDateValue);
    }

    startDateValue -= 1000 * 60 * 60 * 24;
    startDate.setTime(startDateValue);

    var lastDay = getFormattedDateString(startDate);

    var dateRangeDisplay = _gel("summary_date_range");
    dateRangeDisplay.innerHTML = firstDay + " - " + lastDay;

    var summaryTable = _gel("summary_table");
    var tableRowsToRemove = summaryTable.rows;

    var tableRowsToRemoveLength = tableRowsToRemove.length;

    if (tableRowsToRemoveLength == 0)
    {
        var lastRow = summaryTable.rows.length;
        var newRow = summaryTable.insertRow(lastRow);
        var taskNameTd = document.createElement("td");
        taskNameTd.className = "modtitle title_heading task_title";
        taskNameTd.innerHTML = "Task";
        newRow.appendChild(taskNameTd);

        var columnWidth = numberOfDatesToRetrieve == 5 ? "15%" : "11%";
        for (j = 0; j < numberOfDatesToRetrieve; j++)
        {
            var column = document.createElement("td");
            var eventData = eventDataArray[j];
            var date = eventData.getDate().toDate();
            column.className = "modtitle title_heading day_title";
            column.style.width = columnWidth;
            column.innerHTML = date.toString().slice(0, 1);
            newRow.appendChild(column);
        }
    }

    if (tableRowsToRemoveLength > 1)
    {
        for (i = 1; i < tableRowsToRemoveLength; i++)
        {
            var currentRow = tableRowsToRemove[1];
            summaryTable.deleteRow(currentRow.rowIndex);
        }
    }

    if (taskIds.length > 0)
    {
        for (i = 0; i < taskIds.length; i++)
        {
            var taskIdPointer = taskIds[i];
            if (taskIdPointer)
            {
                var taskId = i;
                var dayCounter = 0;
                var dayTotal;

                var lastRow = summaryTable.rows.length;
                var newRow = summaryTable.insertRow(lastRow);
                newRow.id = "summary_row_" + taskId;

                var taskNameTd = document.createElement("td");
                taskNameTd.innerHTML = getTaskName(taskId);
                taskNameTd.className = "summary_task_data task_title_data";
                newRow.appendChild(taskNameTd);

                for (j = 0; j < numberOfDatesToRetrieve; j++)
                {
                    var currentTd = document.createElement("td");
                    currentTd.innerHTML = getTotalString(eventDataArray[dayCounter++].getTotalForTask(taskId))
                    if (numberOfDatesToRetrieve == 7)
                    {
                        currentTd.className = "summary_task_data summary_total";
                    }
                    else
                    {
                        currentTd.className = "summary_task_data summary_total_larger";
                    }
                    newRow.appendChild(currentTd);
                }
            }
        }
    }
    else
    {
        var lastRow = summaryTable.rows.length;
        var newRow = summaryTable.insertRow(lastRow);
        var noTaskTd = document.createElement("td");
        noTaskTd.colSpan = numberOfDatesToRetrieve + 1;
        noTaskTd.innerHTML = "No timesheet data recorded";
        noTaskTd.className = "selectedtab tabtitle summary_task_data task_title_data";
        newRow.appendChild(noTaskTd);
    }

}

function getTotalString(total)
{
    var duration;

    if (total)
    {
        duration = total.getDuration();
    }
    else
    {
        duration = new BasicTime();
    }
    var hours = eval(duration.getHours());
    var minutes = eval(duration.getMinutes());
    var seconds = eval(duration.getSeconds());

    minutes += seconds / 60;

    var prefs = new _IG_Prefs(__MODULE_ID__);
    var round = prefs.getInt("summary_round");
    var format = prefs.getInt("summary_format");
    var zeroDurationFormat = prefs.getInt("summary_zero_duration_format");

    if (round > 0)
    {
        minutes = Math.round(minutes / round) * round;
        if (minutes == 60)
        {
            hours += 1;
        }
    }

    var totalString = '';
    if (hours != 0 || minutes != 0 || zeroDurationFormat == 0)
    {
        totalString += hours;

        if (format == 0)
        {
            totalString += '.';
            totalString += getFormattedNumber(Math.round((minutes / 60) * 100), false);
        }
        else
        {
            totalString += 'h ';
            totalString += getFormattedNumber(minutes);
            totalString += 'm';
        }
    }
    else
    {
        switch (zeroDurationFormat)
                {
            case 1:
            {
                totalString += "-";
                break;
            }
            case 2:
            {
                totalString += "&nbsp;";
                break;
            }
        }
    }

    return totalString;
}
</script>

<script type="text/javascript">
    _IG_RegisterOnloadHandler(initialise);
</script>
]]>
    </Content>
</Module>